<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\selftest.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\selftest.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Tue Apr 16 23:11:29 2019
<BR><P>
<H3>Maximum Stack Usage =       1760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
apAACI_TEST &rArr; AACI_Loopback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ac]">get_stack_ptr</a>
 <LI><a href="#[b3]">memcpy_LDM_STM</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SysTick_Handler</a><BR>
 <LI><a href="#[35]">CORDIO0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">CORDIO0_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">BusFault_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[35]">CORDIO0_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[36]">CORDIO1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[37]">CORDIO2_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[38]">CORDIO3_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[39]">CORDIO4_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3a]">CORDIO5_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3b]">CORDIO6_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3c]">CORDIO7_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1d]">DUALTIMER_HANDLER</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[34]">EFLASH_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[44]">ETHERNET_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[16]">I2C0_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[17]">I2C1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[23]">PORT0_0_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2d]">PORT0_10_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2e]">PORT0_11_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2f]">PORT0_12_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[30]">PORT0_13_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[31]">PORT0_14_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[32]">PORT0_15_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[24]">PORT0_1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[25]">PORT0_2_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[26]">PORT0_3_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[27]">PORT0_4_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[28]">PORT0_5_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[29]">PORT0_6_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2a]">PORT0_7_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2b]">PORT0_8_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[2c]">PORT0_9_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[19]">PORT0_COMB_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1a]">PORT1_COMB_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3d]">PORT2_COMB_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3e]">PORT3_COMB_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[21]">QSPI_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[18]">RTC_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[14]">Reserved1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[56]">Reset_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1e]">SPI0_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[20]">SPI1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[33]">SYSERROR_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(.text)
 <LI><a href="#[1b]">TIMER0_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1c]">TIMER1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[3f]">TRNG_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[22]">TSC_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[13]">UART0_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[15]">UART1_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[1f]">UARTOVF_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[40]">UARTRX2_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[42]">UARTRX3_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[41]">UARTTX2_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[43]">UARTTX3_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_cmsdk_cm3.o(.text) referenced from startup_cmsdk_cm3.o(RESET)
 <LI><a href="#[57]">__main</a> from __main.o(!!!main) referenced from startup_cmsdk_cm3.o(.text)
 <LI><a href="#[49]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[48]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[47]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4e]">apAACI_TEST</a> from apaaci.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[4f]">apCLCD_TEST</a> from apclcd.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[53]">apLANI_TEST</a> from aplan.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[51]">apLEDS_TEST</a> from apleds.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[54]">apMEM_TEST</a> from apmem.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[52]">apSSP_TEST</a> from apssp.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[55]">apTIMER_TEST</a> from aptimer.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[50]">apTSC_TEST</a> from aptsc.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[4a]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[4c]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[57]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[150]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[151]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[152]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[12a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[60]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[62]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[153]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[72]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[154]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[64]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[155]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[156]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[66]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[157]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[158]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[159]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[15a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[160]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[161]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[162]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[163]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[164]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[165]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[166]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[167]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[168]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[77]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[6d]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[16a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[16b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[16c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[16d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[16e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[16f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[170]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[71]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[171]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[73]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[172]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[14e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[76]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[173]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[78]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b2]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_memory
</UL>

<P><STRONG><a name="[174]"></a>Test_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[7c]"></a>Get_Status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Test
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Production_Test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Production_Results
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Results
</UL>

<P><STRONG><a name="[7a]"></a>Print_Results</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7d]"></a>Print_Production_Results</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7e]"></a>Run_Production_Test</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_All_Tests
</UL>

<P><STRONG><a name="[7f]"></a>Run_Test</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[80]"></a>Run_All_Tests</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Production_Test
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[82]"></a>Select_Test</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLine
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 874 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_rect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_line
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_circle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_m3_out
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStdOutInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a2]"></a>apSleep</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_test_loopback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_Loopback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_freq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_int
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLEDS_TEST
</UL>

<P><STRONG><a name="[8f]"></a>apSleepus</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST_M
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ByteRDRW
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Wait
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_INIT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_test
</UL>

<P><STRONG><a name="[8c]"></a>ap_check_peripheral_interrupt</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ap_check_peripheral_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPendingIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_int
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[8e]"></a>register_test</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleepus
</UL>

<P><STRONG><a name="[81]"></a>Wait_For_Enter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Wait_For_Enter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apMEM_TEST
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLEDS_TEST
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apCLCD_TEST
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apAACI_TEST
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_All_Tests
</UL>

<P><STRONG><a name="[92]"></a>Get_OK</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_OK &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLEDS_TEST
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apCLCD_TEST
</UL>

<P><STRONG><a name="[93]"></a>GetChars</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>fgetc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[139]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[98]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[99]"></a>_sys_open</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[149]"></a>_sys_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[9b]"></a>_sys_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[9c]"></a>_sys_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetc
</UL>

<P><STRONG><a name="[13b]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[140]"></a>_sys_seek</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[176]"></a>_sys_ensure</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>_sys_flen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[177]"></a>_sys_tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>_sys_command_string</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[179]"></a>system</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_memory
</UL>

<P><STRONG><a name="[86]"></a>UartStdOutInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart_stdout.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>UartPutc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uart_stdout.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEndSimulation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLine
</UL>

<P><STRONG><a name="[97]"></a>UartGetc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart_stdout.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLine
</UL>

<P><STRONG><a name="[83]"></a>GetLine</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, uart_stdout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Test
</UL>

<P><STRONG><a name="[9d]"></a>UartEndSimulation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_stdout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>

<P><STRONG><a name="[55]"></a>apTIMER_TEST</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, aptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = apTIMER_TEST &rArr; test_dual_timer_int &rArr; ap_check_peripheral_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_freq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_int
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>check_selftest_used_memory</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, apmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stack_ptr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[af]"></a>test_memory</STRONG> (Thumb, 354 bytes, Stack size 1048 bytes, apmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = test_memory &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_LDM_STM
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_ldm_test
</UL>

<P><STRONG><a name="[b4]"></a>stm_ldm_test</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, apmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = stm_ldm_test &rArr; test_memory &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_memory
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apMEM_TEST
</UL>

<P><STRONG><a name="[17a]"></a>can_corrupt_usedmem</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, apmem.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>apMEM_TEST</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, apmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = apMEM_TEST &rArr; stm_ldm_test &rArr; test_memory &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_ldm_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>apLEDS_TEST</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, apleds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = apLEDS_TEST &rArr; Wait_For_Enter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>apCLCD_TEST</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, apclcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = apCLCD_TEST &rArr; Wait_For_Enter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>apTSC_INIT</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, aptsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = apTSC_INIT &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_clear
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleepus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
</UL>

<P><STRONG><a name="[bc]"></a>apTSC_LCDINIT</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, aptsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = apTSC_LCDINIT &rArr; GLCD_Box &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetTextColor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Box
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Boarder
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
</UL>

<P><STRONG><a name="[50]"></a>apTSC_TEST</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, aptsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = apTSC_TEST &rArr; apTSC_INIT &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_LCDINIT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_INIT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>apAACI_TEST</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, apaaci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = apAACI_TEST &rArr; AACI_Loopback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_Loopback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>smsc9220_check_id</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = smsc9220_check_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_read_id
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[ce]"></a>smsc9220_check_macaddress</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = smsc9220_check_macaddress &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[d1]"></a>smsc9220_print_mac_registers</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smsc9220_print_mac_registers &rArr; smsc9220_mac_regread &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regread
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[d4]"></a>smsc9220_initialise</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smsc9220_initialise &rArr; smsc9220_check_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_wait_eeprom
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_soft_reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_set_txfifo
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_reset_phy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_init_irqs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_establish_link
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_enable_xmit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_enable_mac_xmit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_enable_mac_recv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_phy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_advertise_cap
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_print_mac_registers
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_id
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_print_phy_registers
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[53]"></a>apLANI_TEST</STRONG> (Thumb, 1156 bytes, Stack size 16 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = apLANI_TEST &rArr; smsc9220_check_macaddress &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_set_soft_int
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_clear_soft_int
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_ready
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_macaddress
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_test_loopback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_check_peripheral_interrupt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>apSSP_Wait</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, apssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleepus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST_M
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ByteRDRW
</UL>

<P><STRONG><a name="[ea]"></a>apSSP_ByteRDRW</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, apssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apSSP_ByteRDRW &rArr; apSSP_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Wait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleepus
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST
</UL>

<P><STRONG><a name="[eb]"></a>apSSP_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, apssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST_S
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST_M
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST
</UL>

<P><STRONG><a name="[52]"></a>apSSP_TEST</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, apssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = apSSP_TEST &rArr; Wait_For_Enter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ByteRDRW
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>apSSP_TEST_M</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, apssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Wait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleepus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[ee]"></a>apSSP_TEST_S</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, apssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a0]"></a>CMSDK_timer_EnableIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
</UL>

<P><STRONG><a name="[a4]"></a>CMSDK_timer_DisableIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
</UL>

<P><STRONG><a name="[a1]"></a>CMSDK_timer_StartTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
</UL>

<P><STRONG><a name="[a3]"></a>CMSDK_timer_StopTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
</UL>

<P><STRONG><a name="[a8]"></a>CMSDK_timer_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_freq
</UL>

<P><STRONG><a name="[9f]"></a>CMSDK_timer_SetValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsdk_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
</UL>

<P><STRONG><a name="[17b]"></a>CMSDK_timer_GetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>CMSDK_timer_SetReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>CMSDK_timer_ClearIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
</UL>

<P><STRONG><a name="[17d]"></a>CMSDK_timer_StatusIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>CMSDK_timer_Init_IntClock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>CMSDK_timer_Init_ExtClock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>CMSDK_timer_Init_ExtEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>CMSDK_uart_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>CMSDK_uart_GetRxBufferFull</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>CMSDK_uart_GetTxBufferFull</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>CMSDK_uart_SendChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>CMSDK_uart_ReceiveChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>CMSDK_uart_GetOverrunStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>CMSDK_uart_ClearOverrunStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>CMSDK_uart_GetBaudDivider</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>CMSDK_uart_GetTxIRQStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>CMSDK_uart_GetRxIRQStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>CMSDK_uart_ClearTxIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>CMSDK_uart_ClearRxIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>CMSDK_gpio_SetOutEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>CMSDK_gpio_ClrOutEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>CMSDK_gpio_GetOutEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>CMSDK_gpio_SetAltFunc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>CMSDK_gpio_ClrAltFunc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>CMSDK_gpio_GetAltFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>CMSDK_gpio_IntClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>CMSDK_gpio_SetIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>CMSDK_gpio_ClrIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>CMSDK_gpio_SetIntHighLevel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>CMSDK_gpio_SetIntRisingEdge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>CMSDK_gpio_SetIntLowLevel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>CMSDK_gpio_SetIntFallingEdge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>CMSDK_gpio_MaskedWrite</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmsdk_driver.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CORDIO0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIO0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIO0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CORDIO1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CORDIO2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CORDIO3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CORDIO4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CORDIO5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CORDIO6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CORDIO7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DUALTIMER_HANDLER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EFLASH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ETHERNET_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PORT0_0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PORT0_10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PORT0_11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PORT0_12_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PORT0_13_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PORT0_14_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PORT0_15_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PORT0_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORT0_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PORT0_3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PORT0_4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PORT0_5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PORT0_6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PORT0_7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PORT0_8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PORT0_9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PORT0_COMB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PORT1_COMB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PORT2_COMB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PORT3_COMB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>QSPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Reserved1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SYSERROR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TRNG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TSC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UARTOVF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UARTRX2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UARTRX3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UARTTX2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UARTTX3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_cmsdk_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cmsdk_cm3.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cmsdk_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm3.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>GLCD_Initialize</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GLCD_Initialize &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apCLCD_TEST
</UL>

<P><STRONG><a name="[f4]"></a>GLCD_SetWindow</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Box
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
</UL>

<P><STRONG><a name="[f5]"></a>GLCD_SetWindowSize</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BoxSize
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BitmapSize
</UL>

<P><STRONG><a name="[f6]"></a>GLCD_WindowMax</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GLCD_WindowMax &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearLn
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>

<P><STRONG><a name="[c0]"></a>GLCD_PutPixel</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GLCD_PutPixel &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Boarder
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_LCDINIT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
</UL>

<P><STRONG><a name="[f7]"></a>GLCD_PutPixelColor</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[bd]"></a>GLCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_LCDINIT
</UL>

<P><STRONG><a name="[19c]"></a>GLCD_SetBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, glcd_spi_mps2.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>GLCD_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GLCD_Clear &rArr; GLCD_WindowMax &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_LCDINIT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apCLCD_TEST
</UL>

<P><STRONG><a name="[fb]"></a>GLCD_DrawChar</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>

<P><STRONG><a name="[fc]"></a>GLCD_DisplayChar</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayString
</UL>

<P><STRONG><a name="[fd]"></a>GLCD_DisplayString</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearLn
</UL>

<P><STRONG><a name="[fe]"></a>GLCD_ClearLn</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DisplayString
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WindowMax
</UL>

<P><STRONG><a name="[ff]"></a>GLCD_Bargraph</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[b7]"></a>GLCD_Bitmap</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GLCD_Bitmap &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apCLCD_TEST
</UL>

<P><STRONG><a name="[100]"></a>GLCD_BitmapSize</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindowSize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[19d]"></a>GLCD_ScrollVertical</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glcd_spi_mps2.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>GLCD_WrCmd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[102]"></a>GLCD_WrReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[103]"></a>GLCD_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[104]"></a>GLCD_Write</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
</UL>

<P><STRONG><a name="[105]"></a>GLCD_End</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
</UL>

<P><STRONG><a name="[be]"></a>GLCD_Boarder</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GLCD_Boarder &rArr; GLCD_PutPixel &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_LCDINIT
</UL>

<P><STRONG><a name="[bf]"></a>GLCD_Box</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GLCD_Box &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_LCDINIT
</UL>

<P><STRONG><a name="[106]"></a>GLCD_BoxSize</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, glcd_spi_mps2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindowSize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[107]"></a>TSC_I2C_send_byte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tsc_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSC_I2C_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_read
</UL>

<P><STRONG><a name="[109]"></a>TSC_I2C_receive_byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tsc_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSC_I2C_receive_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_read
</UL>

<P><STRONG><a name="[10a]"></a>TSC_I2C_receive_ack</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tsc_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSC_I2C_receive_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_read
</UL>

<P><STRONG><a name="[10b]"></a>TSC_I2C_send_ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tsc_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSC_I2C_send_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_read
</UL>

<P><STRONG><a name="[ba]"></a>TSC_I2C_read</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, tsc_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSC_I2C_read &rArr; TSC_I2C_receive_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_send_ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_receive_ack
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_receive_byte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_INIT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
</UL>

<P><STRONG><a name="[bb]"></a>TSC_I2C_write</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tsc_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSC_I2C_write &rArr; TSC_I2C_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_receive_ack
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_INIT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
</UL>

<P><STRONG><a name="[b9]"></a>TSC_I2C_clear</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tsc_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSC_I2C_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_INIT
</UL>

<P><STRONG><a name="[10c]"></a>AAIC_I2C_send_byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, aaic_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AAIC_I2C_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_read
</UL>

<P><STRONG><a name="[10d]"></a>AAIC_I2C_receive_byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, aaic_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AAIC_I2C_receive_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_read
</UL>

<P><STRONG><a name="[10e]"></a>AAIC_I2C_receive_ack</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, aaic_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AAIC_I2C_receive_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_read
</UL>

<P><STRONG><a name="[10f]"></a>AAIC_I2C_send_ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, aaic_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AAIC_I2C_send_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_read
</UL>

<P><STRONG><a name="[c9]"></a>AAIC_I2C_read</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, aaic_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AAIC_I2C_read &rArr; AAIC_I2C_receive_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_send_ack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_receive_ack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_receive_byte
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[c7]"></a>AAIC_I2C_write</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, aaic_i2c_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AAIC_I2C_write &rArr; AAIC_I2C_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_receive_ack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[c4]"></a>i2s_config</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, aaic_i2s_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2s_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[19e]"></a>i2s_tx_fifo_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>i2s_tx_fifo_full</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_Loopback
</UL>

<P><STRONG><a name="[19f]"></a>i2s_rx_fifo_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>i2s_rx_fifo_full</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>i2s_rx_irq_alert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>i2s_tx_irq_alert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>i2s_tx_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>i2s_rx_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>i2s_get_tx_error</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>i2s_get_rx_error</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>i2s_clear_tx_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>i2s_clear_rx_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>i2s_fifo_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>i2s_fifo_set_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[c8]"></a>i2s_fifo_clear_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[1aa]"></a>i2s_codec_reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>i2s_codec_set_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[c5]"></a>i2s_codec_clear_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[c6]"></a>i2s_speed_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aaic_i2s_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_INIT
</UL>

<P><STRONG><a name="[cf]"></a>smsc9220_mac_regread</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smsc9220_mac_regread &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_enable_mac_xmit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_enable_mac_recv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_print_mac_registers
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_macaddress
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regwrite
</UL>

<P><STRONG><a name="[d0]"></a>smsc9220_mac_regwrite</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_enable_mac_xmit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_enable_mac_recv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_macaddress
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regwrite
</UL>

<P><STRONG><a name="[d3]"></a>smsc9220_phy_regread</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smsc9220_phy_regread &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_reset_phy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_establish_link
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_phy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_advertise_cap
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_print_phy_registers
</UL>

<P><STRONG><a name="[111]"></a>smsc9220_phy_regwrite</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smsc9220_phy_regwrite &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_reset_phy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_establish_link
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_advertise_cap
</UL>

<P><STRONG><a name="[cd]"></a>smsc9220_read_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eth_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_id
</UL>

<P><STRONG><a name="[d5]"></a>smsc9220_soft_reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smsc9220_soft_reset &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[d6]"></a>smsc9220_set_txfifo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eth_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[d7]"></a>smsc9220_wait_eeprom</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smsc9220_wait_eeprom &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[d8]"></a>smsc9220_init_irqs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eth_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[d9]"></a>smsc9220_check_phy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smsc9220_check_phy &rArr; smsc9220_phy_regread &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[da]"></a>smsc9220_reset_phy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smsc9220_reset_phy &rArr; smsc9220_phy_regread &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[db]"></a>smsc9220_advertise_cap</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smsc9220_advertise_cap &rArr; smsc9220_phy_regread &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[dc]"></a>smsc9220_establish_link</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smsc9220_establish_link &rArr; smsc9220_phy_regread &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[de]"></a>smsc9220_enable_xmit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eth_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[dd]"></a>smsc9220_enable_mac_xmit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smsc9220_enable_mac_xmit &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regread
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[df]"></a>smsc9220_enable_mac_recv</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smsc9220_enable_mac_recv &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regread
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[e4]"></a>smsc9220_check_ready</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eth_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[e7]"></a>smsc9220_set_soft_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eth_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[e8]"></a>smsc9220_clear_soft_int</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eth_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[e2]"></a>smsc9220_recv_packet</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = smsc9220_recv_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_test_loopback
</UL>

<P><STRONG><a name="[e1]"></a>smsc9220_xmit_packet</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, eth_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = smsc9220_xmit_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_test_loopback
</UL>

<P><STRONG><a name="[108]"></a>i2c_delay</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fpga.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_send_ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_receive_ack
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_receive_byte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_send_byte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_I2C_clear
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_send_ack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_receive_ack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_receive_byte
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_send_byte
</UL>

<P><STRONG><a name="[110]"></a>Sleepms</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_wait_eeprom
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_soft_reset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_mac_regread
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regwrite
</UL>

<P><STRONG><a name="[1ab]"></a>Sleepus</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fpga.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>gpio_m3_out</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_m3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_screen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_word
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>

<P><STRONG><a name="[1ac]"></a>gpio_m3_in</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio_m3.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>lcd_set_cursor</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_screen
</UL>

<P><STRONG><a name="[117]"></a>lcd_clear_screen</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_clear_screen &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_m3_out
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_write_byte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_string
</UL>

<P><STRONG><a name="[118]"></a>lcd_draw_point</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_word
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_line
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_circle
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_h_line
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_v_line
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_rect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_char
</UL>

<P><STRONG><a name="[119]"></a>lcd_display_char</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_string
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_num
</UL>

<P><STRONG><a name="[11a]"></a>lcd_display_num</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_char
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pow
</UL>

<P><STRONG><a name="[11c]"></a>lcd_display_string</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_char
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_screen
</UL>

<P><STRONG><a name="[8b]"></a>lcd_draw_line</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lcd_draw_line &rArr; lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>lcd_draw_circle</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lcd_draw_circle &rArr; lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>lcd_fill_rect</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>

<P><STRONG><a name="[11e]"></a>lcd_draw_v_line</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_draw_v_line &rArr; lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_rect
</UL>

<P><STRONG><a name="[11f]"></a>lcd_draw_h_line</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_draw_h_line &rArr; lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_rect
</UL>

<P><STRONG><a name="[89]"></a>lcd_draw_rect</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lcd_draw_rect &rArr; lcd_draw_h_line &rArr; lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_h_line
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_v_line
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>lcd_init</STRONG> (Thumb, 542 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_init &rArr; lcd_clear_screen &rArr; lcd_set_cursor &rArr; lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_m3_out
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_screen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleepms
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>spi_read_write_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_screen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_word
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>

<P><STRONG><a name="[1ad]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_selftest_used_memory
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[ae]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_selftest_used_memory
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[84]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Test
</UL>

<P><STRONG><a name="[7b]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST_S
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST_M
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_macaddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_check_id
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_test_loopback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_Loopback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_INIT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_ldm_test
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_memory
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_selftest_used_memory
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_freq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_int
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_freq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_check_peripheral_interrupt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTSC_TEST
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTIMER_TEST
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apMEM_TEST
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLEDS_TEST
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apCLCD_TEST
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apAACI_TEST
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Test
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_All_Tests
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Test
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Production_Test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Production_Results
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Results
</UL>

<P><STRONG><a name="[125]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[126]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[124]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5f]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1af]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[85]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Test
</UL>

<P><STRONG><a name="[12c]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[12e]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[90]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChars
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLine
</UL>

<P><STRONG><a name="[91]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChars
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Enter
</UL>

<P><STRONG><a name="[b1]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_memory
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[67]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[94]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChars
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_TEST_M
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[131]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1b3]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1b4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[120]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1b5]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[134]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[65]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[136]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[137]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[61]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[63]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[123]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[12d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[12b]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[47]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1b7]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[13f]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[12f]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[141]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[6c]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[6e]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1ba]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bb]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[133]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[4c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[13a]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[13c]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1bc]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[143]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[148]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[146]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1bd]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[135]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[70]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1be]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14b]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[14a]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[14c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[14f]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[ac]"></a>get_stack_ptr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, apmemsup.o(MemoryTest), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_selftest_used_memory
</UL>

<P><STRONG><a name="[b3]"></a>memcpy_LDM_STM</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, apmemsup.o(MemoryTest))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_memory
</UL>

<P><STRONG><a name="[129]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[49]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>NVIC_GetPendingIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_check_peripheral_interrupt
</UL>

<P><STRONG><a name="[9e]"></a>test_timer_int</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, aptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = test_timer_int &rArr; ap_check_peripheral_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_StopTimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_StartTimer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_SetValue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_EnableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_DisableIRQ
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_ClearIRQ
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_check_peripheral_interrupt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTIMER_TEST
</UL>

<P><STRONG><a name="[a7]"></a>test_timer_freq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_timer_freq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_StopTimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_StartTimer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_SetValue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSDK_timer_GetValue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTIMER_TEST
</UL>

<P><STRONG><a name="[a9]"></a>test_dual_timer_int</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = test_dual_timer_int &rArr; ap_check_peripheral_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_check_peripheral_interrupt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTIMER_TEST
</UL>

<P><STRONG><a name="[aa]"></a>test_dual_timer_freq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = test_dual_timer_freq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apTIMER_TEST
</UL>

<P><STRONG><a name="[a6]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aptimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dual_timer_int
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_timer_int
</UL>

<P><STRONG><a name="[c1]"></a>AACI_INIT</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, apaaci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AACI_INIT &rArr; AAIC_I2C_write &rArr; AAIC_I2C_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_speed_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_fifo_set_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_fifo_clear_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_codec_set_reset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_codec_clear_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAIC_I2C_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apAACI_TEST
</UL>

<P><STRONG><a name="[ca]"></a>AACI_Loopback</STRONG> (Thumb, 570 bytes, Stack size 1600 bytes, apaaci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = AACI_Loopback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2s_tx_fifo_full
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apAACI_TEST
</UL>

<P><STRONG><a name="[d2]"></a>smsc9220_print_phy_registers</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smsc9220_print_phy_registers &rArr; smsc9220_phy_regread &rArr; smsc9220_mac_regwrite &rArr; Sleepms
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_phy_regread
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_initialise
</UL>

<P><STRONG><a name="[e3]"></a>compare_buf</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = compare_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_test_loopback
</UL>

<P><STRONG><a name="[e0]"></a>smsc9220_test_loopback</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, aplan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = smsc9220_test_loopback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_xmit_packet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smsc9220_recv_packet
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_buf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aplan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apLANI_TEST
</UL>

<P><STRONG><a name="[f2]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[ef]"></a>wr_cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wr_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BoxSize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WrCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BitmapSize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixelColor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Box
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
</UL>

<P><STRONG><a name="[f1]"></a>wr_dat</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixelColor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
</UL>

<P><STRONG><a name="[f0]"></a>spi_tran</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[f8]"></a>wr_dat_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wr_dat_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BoxSize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BitmapSize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Box
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
</UL>

<P><STRONG><a name="[fa]"></a>wr_dat_stop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BoxSize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_End
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BitmapSize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Box
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
</UL>

<P><STRONG><a name="[f9]"></a>wr_dat_only</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wr_dat_only
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BoxSize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_BitmapSize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bargraph
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Box
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Bitmap
</UL>

<P><STRONG><a name="[f3]"></a>wr_reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, glcd_spi_mps2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wr_reg &rArr; wr_dat
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_WrReg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixelColor
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindowSize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_PutPixel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[112]"></a>lcd_write_byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_m3_out
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_screen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>

<P><STRONG><a name="[114]"></a>lcd_write_word</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_m3_out
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>

<P><STRONG><a name="[115]"></a>lcd_write_register</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_write_register &rArr; lcd_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>

<P><STRONG><a name="[11b]"></a>_pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_num
</UL>

<P><STRONG><a name="[4b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
